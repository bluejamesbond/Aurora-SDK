////////////////////////////////////////////////////////////////////////////////
// GAURDS
////////////////////////////////////////////////////////////////////////////////

#ifndef __ACTIONLISTENER_H__
#define __ACTIONLISTENER_H__

//+-----------------------------------------------------------------------------
//
//  Class: 
//      ACTIONLISTENER
//
//  Synopsis:
//      Listener class for action events such as when a component gets clicked.
//
//------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
// INCLUDE
////////////////////////////////////////////////////////////////////////////////

#include "ExtLibs.h"
#include "ActionEvent.h"
#include "AbstractListener.h"

using namespace std;

namespace A2D {

	////////////////////////////////////////////////////////////////////////////////
	// FORWARD DECLARATIONS
	////////////////////////////////////////////////////////////////////////////////

	class AbstractListener;
	class ActionEvent;

	////////////////////////////////////////////////////////////////////////////////
	// DEFINE
	////////////////////////////////////////////////////////////////////////////////

	#define _LISTENER_ACTION			0x7000

	////////////////////////////////////////////////////////////////////////////////
	// DECLARATION
	////////////////////////////////////////////////////////////////////////////////

	class ActionListener : public AbstractListener
	{
	public:
		ActionListener();
		ActionListener(string xString);
		virtual ~ActionListener();

		void							Notify(ActionEvent * xEvent);
		void							Print() const;
		virtual void					ActionPerformed(ActionEvent * xEvent);

	public:


	protected:

		virtual void					Notify(AbstractEvent * xEvent);

	private:
		ActionListener(const ActionListener&);
		ActionListener& operator()(const ActionListener&);

		string							aName;

	public:

		//////////////////////////////////////////////////////////
		// ABSTRACT IMPLEMENTATION
		//////////////////////////////////////////////////////////

		virtual HRESULT                 initialize();
		virtual LPCWSTR                 getClass();
		virtual LPCWSTR                 toString();
	};

}


#endif