////////////////////////////////////////////////////////////////////////////////
// GAURDS
////////////////////////////////////////////////////////////////////////////////

#ifndef __A2DQUADX_H__
#define __A2DQUADX_H__

//+-----------------------------------------------------------------------------
//
//  Class: 
//      A2DQUADX
//
//  Synopsis:
//      Class for multiple quads.
//
//------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
// INCLUDE
////////////////////////////////////////////////////////////////////////////////

#include "A2DExtLibs.h"
#include "A2DAbstract.h"
#include "A2DAbstractPipelineComponent.h"
#include "A2DRect.h"
#include "A2DVertexData.h"
#include "A2DBackBuffer.h"

////////////////////////////////////////////////////////////////////////////////
// FORWARD DECLARATIONS
////////////////////////////////////////////////////////////////////////////////

class A2D;
class A2DAbstract;

////////////////////////////////////////////////////////////////////////////////
// DEFINE
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// DECLARATION
////////////////////////////////////////////////////////////////////////////////

class A2DQuadX : public A2DQuad
{
public:
	A2DQuadX(A2DBackBuffer * xBuffer, A2DRect * xRect, int xQuadCount);
	~A2DQuadX();

	int								aQuadCount; // number of quads

	const int						A2DQUADX_HORIZONTAL_MODE = 0x04215; // horizontal quad
	const int						A2DQUADX_VERTICAL_MODE = 0x02414;

	///////////////////////////////////////////

	bool							aRepeatX;
	bool							aRepeatY;
	bool							aHorizontal;
	bool							aVertical;

	///////////////////////////////////////////

	virtual HRESULT CreateResources(void * xArgs[]);

	///////////////////////////////////////////

	// 0: a2drect
	// 1: a2dtexture
	// 2: a2dwinprops
	// 3: orientation (horizontal/vertical) (?)
	// 4: repeat direction x or y (?)
	virtual void					Update(void* Args[]);
	virtual HRESULT					Map();

protected:

	virtual HRESULT					MapCoords();
	virtual void					BuildVertex();

public:

	//////////////////////////////////////////////////////////
	// A2DABSTRACT IMPLEMENTATION
	//////////////////////////////////////////////////////////

	virtual HRESULT                 Initialize() = 0;
	virtual void                    Deinitialize() = 0;
	virtual LPCWSTR                 GetClass();
	virtual LPCWSTR                 ToString();
	virtual bool                    operator==(A2DAbstract * A2DAbstract);
	
};



#endif