////////////////////////////////////////////////////////////////////////////////
// GAURDS
////////////////////////////////////////////////////////////////////////////////

#ifndef __ROOTPANE_H__
#define __ROOTPANE_H__

//+-----------------------------------------------------------------------------
//
//  Class:
//      ROOTPANE
//
//  Synopsis:
//      Differentiates which of the two possible arcs could match the given arc
//      parameters.
//
//------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
// INCLUDE
////////////////////////////////////////////////////////////////////////////////


#include "RenderData.h"
#include "VertexData.h"
#include "BackBuffer.h"
#include "Texture.h"
#include "Panel.h"

////////////////////////////////////////////////////////////////////////////////
// FORWARD DECLARATIONS
////////////////////////////////////////////////////////////////////////////////

class ;
class Abstract;
class Renderable;
class Camera;
struct CameraProperties;
class BackBuffer;

class Window;
class AbstractComponent;

////////////////////////////////////////////////////////////////////////////////
// DEFINE
////////////////////////////////////////////////////////////////////////////////

#define ROOTPANE_LL(str1, str2)                            str1 str2

////////////////////////////////////////////////////////////////////////////////
// DECLARATION
////////////////////////////////////////////////////////////////////////////////

class RootPane : public Panel
{

private:

	bool							aLockDimensions = false;

public:

////////////////////////////////////////////////////////////////////////////////
// PANEL
////////////////////////////////////////////////////////////////////////////////

	virtual void                    RenderComponent(RenderData * xRenderData);
	virtual void                    RenderComponentBorder(RenderData * xRenderData);
	virtual LRESULT                 WindowMsg(HWND * xHwnd, UINT * xMessage, WPARAM * xWParam, LPARAM * xLParam);
	virtual void					SetBounds(float xOptLeft, float xOptTop, float xOptWidth, float xOptHeight) final;

public:

////////////////////////////////////////////////////////////////////////////////
// ABSTRACT
////////////////////////////////////////////////////////////////////////////////

	virtual LPCWSTR                 GetClass();
	virtual LPCWSTR                 ToString();
	virtual bool                    operator==(Abstract * xAbstract);

};

#endif
