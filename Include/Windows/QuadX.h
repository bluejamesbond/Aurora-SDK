////////////////////////////////////////////////////////////////////////////////
// GAURDS
////////////////////////////////////////////////////////////////////////////////

#ifndef __QUADX_H__
#define __QUADX_H__

//+-----------------------------------------------------------------------------
//
//  Class: 
//      QUADX
//
//  Synopsis:
//      Class for multiple quads.
//
//------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
// INCLUDE
////////////////////////////////////////////////////////////////////////////////

#include "../_A2DCommon.h"
#include "../Pipelineable.h"

#include "ExtLibs.h"
#include "Rect.h"
#include "BackBuffer.h"
#include "Quad.h"

////////////////////////////////////////////////////////////////////////////////
// FORWARD DECLARATIONS
////////////////////////////////////////////////////////////////////////////////

class ;
class Abstract;

////////////////////////////////////////////////////////////////////////////////
// DEFINE
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// DECLARATION
////////////////////////////////////////////////////////////////////////////////

class QuadX : public Quad
{
public:
	QuadX(BackBuffer * xBuffer, Rect xConstraints, int xQuadCount);
	~QuadX();

	int								aQuadCount; // number of quads

	const int						QUADX_HORIZONTAL_MODE = 0x04215; // horizontal quad
	const int						QUADX_VERTICAL_MODE = 0x02414;

	///////////////////////////////////////////

	bool							aRepeatX;
	bool							aRepeatY;
	bool							aHorizontal;
	bool							aVertical;

	///////////////////////////////////////////

	virtual STATUS 					CreateResources(void * xArgs[]);

	///////////////////////////////////////////

	// 0: a2drect
	// 1: a2dtexture
	// 2: a2dwinprops
	// 3: orientation (horizontal/vertical) (?)
	// 4: repeat direction x or y (?)
	virtual void					Update(void* Args[]);
	virtual STATUS					Map();

protected:

	virtual STATUS					MapCoords();
	virtual void					BuildVertex();

public:

	//////////////////////////////////////////////////////////
	// ABSTRACT IMPLEMENTATION
	//////////////////////////////////////////////////////////

	virtual STATUS                 initialize() = 0;
	virtual void                    Deinitialize() = 0;
	virtual LPCWSTR                 getClass();
	virtual LPCWSTR                 toString();
	virtual bool                    operator==(Abstract * Abstract);
	
};



#endif